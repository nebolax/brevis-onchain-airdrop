{
  "language": "Solidity",
  "sources": {
    "contracts/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}"
    },
    "contracts/lib/BrevisAppZkOnly.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\n// App that only accepts ZK-attested results.\nabstract contract BrevisAppZkOnly {\n    address public brevisRequest;\n\n    modifier onlyBrevisRequest() {\n        require(msg.sender == brevisRequest, \"invalid caller\");\n        _;\n    }\n\n    constructor(address _brevisRequest) {\n        brevisRequest = _brevisRequest;\n    }\n\n    function handleProofResult(bytes32 _vkHash, bytes calldata _appCircuitOutput) internal virtual {\n        // to be overrided by custom app\n    }\n\n    function brevisCallback(bytes32 _appVkHash, bytes calldata _appCircuitOutput) external onlyBrevisRequest {\n        handleProofResult(_appVkHash, _appCircuitOutput);\n    }\n\n    function brevisBatchCallback(\n        bytes32[] calldata _appVkHashes,\n        bytes[] calldata _appCircuitOutputs\n    ) external onlyBrevisRequest {\n        for (uint i = 0; i < _appVkHashes.length; i++) {\n            handleProofResult(_appVkHashes[i], _appCircuitOutputs[i]);\n        }\n    }\n}\n"
    },
    "contracts/PermissionlessAirdrop.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"./lib/BrevisAppZkOnly.sol\";\nimport \"./IERC20.sol\";\n\ncontract PermissionlessAirdrop is BrevisAppZkOnly {\n    bytes32 public immutable vkHash;\n    address public immutable airdoppingToken;\n    mapping(address => uint256) public issuedTokens;\n\n    event Airdropped(address recipient, address token, uint256 amount);\n\n    constructor(\n        address _brevisRequest,\n        bytes32 _vkHash,\n        address _airdoppingToken\n    ) BrevisAppZkOnly(_brevisRequest) {\n        vkHash = _vkHash;\n        airdoppingToken = _airdoppingToken;\n    }\n\n    function handleProofResult(bytes32 _vkHash, bytes calldata _circuitOutput) internal override {\n        require(vkHash == _vkHash, \"invalid vk\");\n        (\n            address userAddr,\n            uint256 transferCount,\n            uint256 totalSent,\n            uint256 earlisetTransferBlock\n        ) = decodeOutput(_circuitOutput);\n\n        // Calculate some airdrop-specific business logic.\n        // Doing some random calculations here just to demonstrate the possibility of it.\n        uint256 points = 0;\n        if (transferCount < 3) points = transferCount;\n        if (transferCount < 10) points = transferCount * 2;\n        else points = transferCount * 4;\n\n        if (totalSent < 10000000000000000000000) { // total sent < 10k\n            points += 10;\n        } else { // total sent > 10k\n            points += 50;\n        }\n\n        if (earlisetTransferBlock < 20000000) { // started sending GHO earlier than Jun 1st 2024\n            points += 100;\n        }\n        uint256 amount = points * 5 * 1000000000000000000;\n\n        IERC20(airdoppingToken).transfer(userAddr, amount);\n        emit Airdropped(userAddr, airdoppingToken, amount);    \n    }\n\n    function decodeOutput(bytes calldata o) internal pure returns (address, uint256, uint256, uint256) {\n        address userAddr = address(bytes20(o[0:20]));\n        uint256 transferCount = uint256(uint248(bytes31(o[20:51])));\n        uint256 totalSent = uint256(uint248(bytes31(o[51:82])));\n        uint256 earlisetTransferBlock = uint256(uint248(bytes31(o[82:113])));\n        return (userAddr, transferCount, totalSent, earlisetTransferBlock);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}